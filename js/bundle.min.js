(function () {
    'use strict';

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    /**
     * An expression marker with embedded unique key to avoid collision with
     * possible text in templates.
     */
    const marker = `{{lit-${String(Math.random()).slice(2)}}}`;

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    // Detect event listener options support. If the `capture` property is read
    // from the options object, then options are supported. If not, then the third
    // argument to add/removeEventListener is interpreted as the boolean capture
    // value so we should only pass the `capture` property.
    let eventOptionsSupported = false;
    // Wrap into an IIFE because MS Edge <= v41 does not support having try/catch
    // blocks right into the body of a module
    (() => {
        try {
            const options = {
                get capture() {
                    eventOptionsSupported = true;
                    return false;
                }
            };
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            window.addEventListener('test', options, options);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            window.removeEventListener('test', options, options);
        }
        catch (_e) {
            // event options not supported
        }
    })();

    /**
     * @license
     * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
     * This code may only be used under the BSD style license found at
     * http://polymer.github.io/LICENSE.txt
     * The complete set of authors may be found at
     * http://polymer.github.io/AUTHORS.txt
     * The complete set of contributors may be found at
     * http://polymer.github.io/CONTRIBUTORS.txt
     * Code distributed by Google as part of the polymer project is also
     * subject to an additional IP rights grant found at
     * http://polymer.github.io/PATENTS.txt
     */
    // IMPORTANT: do not change the property name or the assignment expression.
    // This line will be used in regexes to search for lit-html usage.
    // TODO(justinfagnani): inject version number at build time
    if (typeof window !== 'undefined') {
        (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.2.1');
    }

    const {
      LitElement,
      html,
      css
    } = litElement;

    class List extends LitElement {
      static get properties() {
        return {
          questions: {
            type: Array
          }
        };
      }

      static get styles() {
        return css`
            span {
                display: none;
            }
            `;
      }

      constructor() {
        super();
        this.questions = [{
          id: 1,
          name: "thiru",
          type: "mysql"
        }, {
          id: 2,
          name: "sathish",
          type: "psql"
        }];
      }

      connectedCallback() {
        super.connectedCallback();
        console.log('connected'); // fetch("http://www.mocky.io/v2/5ebd805831000071285b147f").then(r => {
        //     // console.log(r.json());
        //     return r.text()}).then(res => {
        //     console.log(JSON.parse(JSON.stringify(res)))
        // 	this.questions = JSON.parse(JSON.stringify(res));
        // }).catch(e=>{
        //     console.log(e)
        // })
      }

      _triggerEdit(id) {
        console.log("edit event triggered", id);
      }

      _triggerDelete(id) {
        console.log("delete event triggered", id);
      }

      _triggerElement(id) {
        console.log("eho     event triggered", id);
      }

      render() {
        return html`
        <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead class="thead-light">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Name</th>
                    <th scope="col">Type</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
            ${this.questions.map(question => html`
                <tr>
                    <th scope="row">${question.id}</th>
                    <td>${question.name}</td>
                    <td>${question.type}</td>
                    <td>
                    <i class="fas fa-edit" @click=${() => this._triggerEdit(question.id)}></i>
                        <i class="fas fa-trash-alt" @click=${() => this._triggerDelete(question.id)}></i>
                        <i class="fab fa-elementor" @click=${() => this._triggerElement(question.id)}></i>
                    </td>
                </tr>
            `)}
            </tbody>
        </table>
    </div>
        `;
      }

      createRenderRoot() {
        return this;
      }

    }

    customElements.define('q-list', List);

    const {
      LitElement: LitElement$1,
      css: css$1,
      html: html$1
    } = litElement;

    class DropDownMenu extends LitElement$1 {
      static get properties() {
        return {
          open: {
            type: Boolean
          }
        };
      }

      static get styles() {
        return css$1`
      ul.hidden {
        display: none;
      }
    `;
      }

      constructor() {
        super();
        this.open = false;
      }

      toggleMenu() {
        this.open = !this.open;
      }

      render() {
        return html$1`
    <q-list></q-list>
      <button class="btn btn-primary" @click=${this.toggleMenu} type="button"><i class="fa fa-plus-square-o pr-2" aria-hidden="true"></i>Create</button>
      <ul class=${this.open ? '' : 'hidden'}>
        <slot></slot>
      </ul>
    `;
      }

      createRenderRoot() {
        return this;
      }

    }

    customElements.define('drop-down-menu', DropDownMenu);

}());
